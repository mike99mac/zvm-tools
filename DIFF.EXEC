/*-------------------------------------------------------------------*/
/* DIFF EXEC - Compare two files line by line                        */
/*-------------------------------------------------------------------*/
diffs = 0
verbose = 1                          /* normal verbosity */
parse arg args
call parseArgs args                  /* parse arguments */
call compareFiles                    /* compare files */
exit diffs                           /* Return non-0 if files differ */
 
/*-------------------------------------------------------------------*/
VrbosMsg: procedure expose verbose
/* issue message in verbose mode                                     */
/*-------------------------------------------------------------------*/
if verbose > 1 then do
  parse arg msg
  call setColor "turq"
  say msg
  call setColor "green"
end
return                               /* vrbosMsg() */
 
/*-------------------------------------------------------------------*/
parseArgs: procedure expose fn1 ft1 fm1 fn2 ft2 fm2 flags verbose
/* Parse input arguments                                             */
/*-------------------------------------------------------------------*/
  parse upper arg fn1 ft1 fm1 fn2 ft2 fm2 extra '(' flags
  if fn1 == "?" | fn1 == "-H" then do
    call usage
    exit
  end
  if fm2 == "" then do
    say "ERROR: Not enough arguments"
    call usage
    exit 2
  end
  if extra <> "" then do
    say "ERROR: Too many arguments"
    call usage
    exit 3
  end
  if fn2 = "=" then fn2 = fn1          /* Allow '=' shorthand */
  if ft2 = "=" then ft2 = ft1
  if fm2 = "=" then fm2 = fm1
  file1 = fn1 ft1 fm1
  file2 = fn2 ft2 fm2
  if file1 == file2 then do
    say "ERROR: Files are identical"
    exit 4
  end
  'estate' file1
  if rc <> 0 then do
    say "File 1" file1 "does not exist"
    exit 5
  end
  'estate' file2
  if rc <> 0 then do
    say "File 2" file2 "does not exist"
    exit 6
  end
  if flags = "V" then                /* verbose mode */
    verbose = 2
return                               /* parseArgs() */
 
/*-------------------------------------------------------------------*/
setColor:
/* Change color of next line                                         */
/*-------------------------------------------------------------------*/
  if verbose = 0 then                /* no output */
    return
  parse arg color
  /* 'conwait'                                flush output stack */
  'pipe cp screen outarea' color '| hole' /* no COMMAND COMPLETE */
  return
 
/*-------------------------------------------------------------------*/
compareFiles: procedure expose fn1 ft1 fm1 fn2 ft2 fm2 flags,
  f1txt. f2txt. f1len f2len verbose diffs
/* Load files and compare line by line with resync capabilities      */
/*-------------------------------------------------------------------*/
  'execio * diskr' fn1 ft1 fm1 '(stem' f1txt. ')'
  if rc <> 0 then do
    say "ERROR: Cannot read file 1:" fn1 ft1 fm1
    exit rc
  end
  'execio * diskr' fn2 ft2 fm2 '(stem' f2txt. ')'
  if rc <> 0 then do
    say "ERROR: Cannot read file 2:" fn2 ft2 fm2
    exit rc
  end
  f1len = f1txt.0
  f2len = f2txt.0
  if f1len = "" then f1len = 0
  if f2len = "" then f2len = 0
  call vrbosMsg "f1len:" f1len "f2len:" f2len
  i = 1
  j = 1
  do while (i <= f1len) & (j <= f2len)
    if f1txt.i = f2txt.j then do /* lines match, move forward */
      call vrbosMsg "Lines same for i:" i "and j:" j
      i = i + 1
      j = j + 1
      iterate
    end
    call vrbosMsg "Lines differ:"
    call vrbosMsg "i:" i "f1txt.i:" f1txt.i
    call vrbosMsg "j:" j "f2txt.j:" f2txt.j
    diffStart_i = i
    diffStart_j = j
    synced = 0
    maxAhead = 10                    /* # lines to look ahead */
    do a = 0 to maxAhead
      do b = 0 to maxAhead
        ii = i + a
        jj = j + b
        if ii > f1len then leave     /* past end of file1 */
        if jj > f2len then leave     /* past end of file2 */
        call vrbosMsg "comparing ii:" ii "f1txt.ii:" f1txt.ii
        call vrbosMsg "     with jj:" jj "f2txt.jj:" f2txt.jj
        if f1txt.ii = f2txt.jj then do  /* match */
          new_i = ii
          new_j = jj
          synced = 1
          call vrbosMsg "Lines match file1:" ii "file2:" jj
          leave a                    /* exit both loops */
        end
      end
    end
    if synced = 0 then do
      call vrbosMsg "can't resync"
      diffEnd_i = f1len
      diffEnd_j = f2len
    end
    else do
      i = new_i
      j = new_j
    end
 
    /* Output difference block */
    if diffStart_i > diffEnd_i then
      say diffStart_i"c"diffStart_j","diffEnd_j
    else if diffStart_j > diffEnd_j then
      say diffStart_i","diffEnd_i"c"diffStart_j
    else
      say diffStart_i","diffEnd_i"c"diffStart_j","diffEnd_j
    do k = diffStart_i to diffEnd_i
      if k <= f1len then
        say "<" f1txt.k
    end
    say "---"
    call setColor "red"
    do k = diffStart_j to diffEnd_j
      if k <= f2len then
        say ">" f2txt.k
    end
    call setColor "green"
    diffs = 1
    i = diffEnd_i + 1
    j = diffEnd_j + 1
  end
  if i <= f1len then do /* remaining lines in file 1 */
    say i","f1len"d"
    do k = i to f1len
      say "<" f1txt.k
    end
    diffs = 1
  end
  else if j <= f2len then do /* remaining lines in file 2 */
    say i-1"a"j","f2len
    do k = j to f2len
      call setColor "red"
      say ">" f2txt.k
      call setColor "green"
    end
    diffs = 1
  end
return
 
/*-------------------------------------------------------------------*/
usage:
/* Display help                                                      */
/*-------------------------------------------------------------------*/
  say "Name : DIFF EXEC - Compare two files"
  say "Usage: diff fn1 ft1 fm1 fn2 ft2 fm2 (flags)"
  say "Where: 'fn1 ft1 fm1' is the first file"
  say "       'fn2 ft2 fm2' is the second file"
  say "       flags: can be 'V': verbose or 'S': silent"
return
