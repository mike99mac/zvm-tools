/*-------------------------------------------------------------------*/
/* CALCOSA EXEC - compute OSA statistics from CP QUERY OSA           */
/* Syntax: CALCOSA [-H] [(FLAGS]                                     */
/* License: MIT - https://en.wikipedia.org/wiki/MIT_License          */
/* Source: https://github.com/mike99mac/zvm-tools                    */
/*-------------------------------------------------------------------*/
verbose = 1
parse upper arg arg1 '(' flags
if arg1 = "?" | arg1 = "-H" then do  /* give help */
  say "Name:  CALCOSA EXEC - compute OSA statistics"
  say "Usage: CALCOSA [(v|verbose]"
  exit 1
end
if flags == "V" | flags == "VERBOSE" then do
  say "Setting verbosity to 2"
  verbose = 2
end
 
/* get used OSA in stem variable usedOSA. */
'PIPE CP QUERY OSA | specs w2-11 | stem usedOSA.' /* Q OSA output  */
if rc <> 0 then do
  say "ERROR: CP QUERY OSA returned" rc "cannot create output"
  exit 2
end
 
/* get free OSA in stem variable freeOSA. if any */
'PIPE CP QUERY OSA FREE | stem freeLines.' /* get Q OSA FREE output  */
if rc <> 0 then do
  say "Warning: CP QUERY OSA FREE returned" rc "- assuming no free OSAs"
  freeOSA.0 = 0
end
else do                                /* there are free OSAs */
  freeOSA.0 = 0                        /* free OSA one per line */
  freeIndex = 0                        /* free OSA index */
  do i = 1 To freeLines.0              /* loop through all free OSAs */
    call parseFreeLine freeLines.i     /* process line of free OSAs */
  end
  if freeOSA.0 = 0 then                /* ended with full line */
    freeOSA.0 = freeIndex
end
 
hipers = 0                           /* num Hipersocket addresses */
OSNs = 0                             /* num OSN addresses */
allOSAindex = 0
allOSA.0 = allOSAindex
call mergeOSA                        /* merge free & used OSA by rdev */
call prtOutput                       /* print results */
exit                                 /* CALCOSA EXEC */
 
/*-------------------------------------------------------------------*/
setColor:
/* Change color of next line                                         */
/*-------------------------------------------------------------------*/
  if verbose = 0 then
    return
  parse arg color
  'conwait'                          /* flush output stack */
  'pipe cp screen outarea' color '| hole' /* no COMMAND COMPLETE */
  return
 
/*-------------------------------------------------------------------*/
VrbosMsg: procedure expose verbose
/* issue message in verbose mode                                     */
/*-------------------------------------------------------------------*/
if verbose > 1 then do
  parse arg msg
  call setColor("turq")
  say msg
  call setColor("green")
end
return                               /* vrbosMsg() */
 
/*-------------------------------------------------------------------*/
parseFreeLine: procedure expose freeOSA. freeIndex verbose
/* get a line of 1 - 4 free OSA and populate stem var freeOSA.       */
/*-------------------------------------------------------------------*/
parse arg "OSA" rdev1 "FREE" "," "OSA" rdev2 "FREE" ",",
          "OSA" rdev3 "FREE" "," "OSA" rdev4 "FREE"
freeIndex = freeIndex + 1
freeOSA.freeIndex = rdev1 "FREE"     /* always one on a line */
if rdev2 = "" then do                /* no more free OSAs */
  freeOSA.0 = freeIndex
  return
end
else do
  freeIndex = freeIndex + 1
  freeOSA.freeIndex = rdev2 "FREE"
end
 
if rdev3 = "" then do                /* no more free OSAs */
  freeOSA.0 = freeIndex
  return
end
else do
  freeIndex = freeIndex + 1
  freeOSA.freeIndex = rdev3 "FREE"
end
 
if rdev4 = "" then do                /* no more free OSAs */
  freeOSA.0 = freeIndex
  return
end
else do
  freeIndex = freeIndex + 1
  freeOSA.freeIndex = rdev4 "FREE"
end
return                               /* parseFreeLine() */
 
/*-------------------------------------------------------------------*/
mergeOSA: procedure expose allOSA. freeOSA. numAllOSA usedOSA. verbose
/* merge used and free OSA lists                                     */
/*-------------------------------------------------------------------*/
freeIndex = 1                        /* index of free array */
usedIndex = 1                        /* index of used array */
allIndex = 1                         /* index of merged array */
call vrbosMsg("numUsed =" usedOSA.0)
call vrbosMsg("freeOSA.0:" freeOSA.0)
do forever
  parse var freeOSA.freeIndex nextFree .
  parse var usedOSA.usedIndex nextUsed .
  call vrbosMsg("nextFree =" nextFree "nextUsed =" nextUsed)
  if X2D(nextFree) < X2D(nextUsed) then do /* free OSA is next */
    allOSA.allIndex = freeOSA.freeIndex
    freeIndex = freeIndex + 1
    allIndex = allIndex + 1
    call vrbosMsg("top loop freeIndex =" freeIndex)
    if freeIndex > freeOSA.0 then do /* all free OSAs copied */
      call vrbosMsg("out of free OSAs - leaving loop")
      leave
    end
  end
  else do                            /* used OSA is next */
    allOSA.allIndex = usedOSA.usedIndex
    usedIndex = usedIndex + 1
    allIndex = allIndex + 1
    call vrbosMsg("top loop usedIndex =" usedIndex)
    if usedIndex > usedOSA.0 then do /* all used OSAs copied */
      call vrbosMsg("out of used OSAs - leaving loop")
      leave
    end
  end
end
call vrbosMsg("out of loop freeIndex:" freeIndex)
do while freeIndex <= freeOSA.0      /* Add remaining free OSAs */
  allOSA.allIndex = freeOSA.freeIndex
  freeIndex = freeIndex + 1
  allIndex = allIndex + 1
  parse var freeOSA.freeIndex nextFree .
end
call vrbosMsg("usedIndex:" usedIndex)
do while usedIndex <= usedOSA.0      /* Add remaining used OSAs */
  allOSA.allIndex = usedOSA.usedIndex
  usedIndex = usedIndex + 1
  allIndex = allIndex + 1
  parse var usedOSA.usedIndex nextUsed .
end
allOSA.0 = allIndex - 1
return                               /* mergeOSA() */
 
/*-------------------------------------------------------------------*/
getPchid: procedure expose verbose
/* Given a CHPID, return the PCHID or "NONE"                         */
/*-------------------------------------------------------------------*/
parse arg chpid .
'PIPE CP QUERY CHPID' chpid 'PCHID | specs w8 | var pchid'
call vrbosMsg("chpid:" chpid "pchid:" pchid)
if pchid = "physical" then           /* no PCHID found */
  pchid = "NONE"
return pchid
 
/*-------------------------------------------------------------------*/
prtLn: procedure expose verbose
/* print one line of output formatting the 7 fields                  */
/*-------------------------------------------------------------------*/
parse arg rdev userID vdev devType OSAtype chpid pchid .
if vdev = "-" then                   /* cannot pass spaces */
  vdev = " "
if devType = "-" then
  devType = " "
if OSAtype = "-" then
  OSAtype = " "
say JUSTIFY(rdev,5) JUSTIFY(userID,9) JUSTIFY(vdev,5) JUSTIFY(devType,8),
  JUSTIFY(OSAType, 8) JUSTIFY(chpid,6) JUSTIFY(pchid,6)
return                               /* prtLn() */
 
/*-------------------------------------------------------------------*/
prtFree: procedure expose verbose
/* print one line of a free OSA - need to get CHPID and PCHID        */
/* Sample output from QUERY PATH 2340:
Device 2340, Status ONLINE
 CHPIDs to Device 2340 (PIM)  : A0
  Physically Available (PAM)  : +
  Online               (LPM)  : +
                       Legend     + Yes - No                         */
/*-------------------------------------------------------------------*/
parse arg rdev .
'PIPE CP QUERY PATH' rdev '| stem qPathOut.'
chpid = WORD(qPathOut.2, 7)
pchid = getPchid(chpid)
dash = "-"
call prtLn(rdev "FREE" dash dash dash chpid pchid)
return                               /* prtFree() */
 
/*-------------------------------------------------------------------*/
prtUsed: procedure expose verbose
/* print one line of a used OSA - need to get PCHID from CHPID       */
/* Sample output from QUERY OSA:
OSA  0340 ATTACHED TO DTCVSW1  0600 DEVTYPE OSA         CHPID F0 OSD */
/*-------------------------------------------------------------------*/
parse arg rdev w3 w4 userID vdev w7 devType w9 chpid OSAtype
pchid = getPchid(chpid)
call prtLn(rdev userID vdev devType OSAType chpid pchid)
return                               /* prtUsed() */
 
/*-------------------------------------------------------------------*/
prtOutput: procedure expose allOSA. freeOSA. usedOSA. verbose
/* print merged free and used OSAs                                   */
/*-------------------------------------------------------------------*/
call prtLn("Rdev UserID  Vdev DevType OSAtype CHPID PCHID")
call prtLn("---- ------  ---- ------- ------- ----- -----")
do i = 1 To allOSA.0
  parse var allOSA.i f1 f2 .
  if f2 = "FREE" then                /* free OSA */
    call prtFree allOSA.i
  else                               /* used OSA */
    call prtUsed allOSA.i
end
say
say "Used OSAs:" FORMAT(usedOSA.0, 4)
say "Free OSAs:" FORMAT(freeOSA.0, 4)
say "           ----"
say "    Total:" FORMAT(allOSA.0, 4)
return                               /* prtOutput() */
 
