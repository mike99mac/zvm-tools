/*--------------------------------------------------------------------*/
/* Name:  GREP EXEC - search files for text patterns                  */
/* Usage: grep [lxFlags] ptrn FN [FT [FM]] [(vmFlags)]                */
/* Source: https://github.com/mike99mac/zvm-tools                     */
/*   .  - Matches any single character                                */
/*   *  - Matches zero or more of the preceding character             */
/*   .* - Matches start of line                                       */
/*   $  - Matches end of line                                         */
/*--------------------------------------------------------------------*/
/* parse for quoted pattern, if not found => single word pattern */
/* trace i */
parse arg args                       /* get all args */
numArgs = WORDS(args)                /* get number of args */
call parseArgs args                  /* parse them */
call searchFiles                     /* do the work */
exit                                 /* GREP EXEC */
 
/*-------------------------------------------------------------------*/
parseArgs: procedure expose numArgs numbers numFiles fn ft fm debug,
  inverse chkCase ptrn
/*-------------------------------------------------------------------*/
  parse arg args                     /* copy of all args */
  parse arg lxFlags "'" ptrn "'" fn ft fm rest '(' VMflags ')'
  if (lxFlags = '?' | lxFlags = "-h") then
    call help                        /* never returns */
  if ptrn = "" then do               /* no single quotes */
    lxFlags = ""                     /* Linux style flags */
    do i = 1 to numArgs              /* get Linux flags */
      nextArg = WORD(args, i)
      if SUBSTR(nextArg, 1, 1) = "-" then do /* a Linux flag */
        if lxFlags = "" then do      /* initialize */
          lxFlags = nextArg
        end
        else do                      /* append to */
          lxFlags = lxFlags nextArg
        end
      end
      else do                        /* shift args */
        ptrn = WORD(args, i)
        fn = WORD(args, i+1)
        ft = WORD(args, i+2)
        if numArgs < i+3 | SUBSTR(WORD(args, i+3), 1, 1) = "(" then
          fm = "A"
        else
          fm = WORD(args, i+3)
        leave                        /* no more Linux flags */
      end
    end
  end
  if fm = "" then
    fm = "A"
  if ft = "" then do
    say "ERROR: missing FT"
    call help
  end
  if fm = "" then                    /* default file mode is A */
    fm = "A"
 
  /* parse Linux and z/VM flags */
  upper flags                        /* flags to upper case */
  chkCase = "yes"                    /* case must match */
  debug = "no"
  doTrace = "no"
  inverse = "no"                     /* show inverse output */
  numbers = "no"                     /* show line numbers */
  call parseVMflags                  /* parse '(vmFlags' */
  call parseLxFlags                  /* parse '-LinuxFlags' */
  if doTrace = "yes" then            /* turn trace on */
    trace i
  call debugMsg "chkCase:" chkCase
  call debugMsg "debug:" debug
  call debugMsg "doTrace:" doTrace
  call debugMsg "numbers:" numbers
  call debugMsg "inverse:" inverse
  upper fn ft fm                     /* upper case file spec */
return                               /* parseArgs() */
 
/*-------------------------------------------------------------------*/
parseLxFlags: procedure expose chkCase debug doTrace lxFlags inverse,
  numbers
/* parse Linux style flags passed in, if any                         */
/*-------------------------------------------------------------------*/
  upper lxFlags                        /* fold to upper case */
  do i = 1 to WORDS(lxFlags)
    nextFlag = WORD(lxFlags, i)
    if SUBSTR(nextFlag, 1, 1) <> "-" then do
      say "ERROR: unexpected arg:" nextFlag
      call help
    end
    do j = 2 to LENGTH(nextFlag)
      nextCh = SUBSTR(nextFlag, j, 1)
      select
        when nextCh = "D" then
          debug = "yes"
        when nextCh = "H" then
          call help
        when nextCh = "I" then       /* ignore case */
          chkCase = "no"
        when nextCh = "N" then       /* show line numbers */
          numbers = "yes"
        when nextCh = "T" then       /* turn trace on */
          doTrace = "yes"
        when nextCh = "V" then
          inverse = "yes"
        otherwise do
          say "ERROR: unrecognized flag:" nextCh
          exit 8                     /* branch fullword */
        end
      end
    end
  end
return                               /* parseLxFlags() */
 
/*-------------------------------------------------------------------*/
parseVMflags: procedure expose chkCase debug doTrace VMflags inverse,
 numbers
/* parse flags passed in, if any                                     */
/*-------------------------------------------------------------------*/
  upper VMflags                      /* fold to upper case */
  numFlags = LENGTH(VMflags)
  do i = 1 to numFlags
    nextFlag = SUBSTR(VMflags, i, 1)
    select
      when nextFlag = "D" then
        debug = "yes"
      when nextFlag = "H" then
        call help
      when nextFlag = "I" then       /* ignore case */
        chkCase = "no"
      when nextFlag = "N" then       /* show line numbers */
        numbers = "yes"
      when nextFlag = "T" then       /* turn trace on */
        doTrace = "yes"
      when nextFlag = "V" then
        inverse = "yes"
      otherwise do
        say "ERROR: unrecognized flag:" nextFlag
        exit 8
      end
    end
  end
return                               /* parseVMflags() */
 
/*-------------------------------------------------------------------*/
searchFiles: procedure expose numbers fn ft fm debug chkCase inverse,
  numbers ptrn
/* Search all files for pattern supplied                             */
/*-------------------------------------------------------------------*/
  'PIPE COMMAND LISTFILE' fn ft fm '| STEM files.'
  retVal = rc
  if retVal <> 0 then do               /* error */
    if files.0 <> 0 then               /* there is an error message */
      say "ERROR:" files.1
    exit retVal
  end
  numFiles = files.0
  retVal = 1                         /* assume no match */
  do i = 1 to numFiles               /* loop through files */
    parse var files.i nextFN nextFT nextFM . /* remove spaces */
    'PIPE COMMAND TYPE' files.i '| STEM lines.'
    numLines = lines.0 - 2           /* 1st & last lines are blank */
    call debugMsg "file:" nextFN nextFT nextFM "has" numLines "lines"
    do j = 2 to lines.0 - 1          /* first line is blank */
      call debugMsg "line" j":" lines.j
      if regex(lines.j) then do      /* line matches */
        if inverse = "no" then do
          call prtLn j-1 nextFN nextFT nextFM lines.j
          retVal = 0                 /* a hit */
        end
      end
      else do                        /* no match */
        if inverse = "yes" then do
          call prtLn j-1 nextFN nextFT nextFM lines.j
          retVal = 0                 /* a non-hit */
        end
      end
    end
  end
exit retVal                          /* searchFiles() */
 
/*-------------------------------------------------------------------*/
prtLn: procedure expose numbers numFiles
/* print a line of output with or without the line number            */
/*-------------------------------------------------------------------*/
  parse arg lineNum fn ft fm theLine
  if numFiles = 1 then               /* do not show file name */
    fileSpec = ""
  else                               /* show file name */
    fileSpec = fn ft fm":"
  if numbers = "yes" then            /* include line number */
    say fileSpec||lineNum":"theLine
  else                               /* no line number */
    say fileSpec||theLine
return                               /* prtLn() */
 
/*-------------------------------------------------------------------*/
debugMsg: procedure expose debug lines.
/* Issue message in debug mode                                       */
/*-------------------------------------------------------------------*/
  if debug = "yes" then do
    parse arg msg
    say msg
  end
return                               /* debugMsg() */
 
/*--------------------------------------------------------------------*/
regex: procedure expose chkCase debug numbers ptrn
/* Basic regular expression matching                                  */
/* Return: 0: no match                                                */
/*         1: match                                                   */
/*--------------------------------------------------------------------*/
  parse arg line                       /* next line to search */
  call debugMsg "in regex() line:" line
  line = STRIP(line, "T")              /* remove trailing blanks */
  ptrnLen = LENGTH(ptrn)
  lineLen = LENGTH(line)
  if chkCase = "no" then do            /* ignore case */
    upper line                         /* fold to upper case */
    upper ptrn
  end
  call debugMsg "ptrn:" ptrn "ptrnLen:" ptrnLen
  call debugMsg "line:" line "lineLen:" lineLen
 
  /* check for leading µ */
  if LEFT(ptrn, 1) = "µ" then do       /* must match begining of line */
    call debugMsg "found leading µ"
    ptrnLen = ptrnLen - 1              /* discount 'µ' */
    if LEFT(line, ptrnLen) = RIGHT(ptrn, ptrnLen) then
      return 1                         /* match */
    else
      return 0                         /* no match */
  end
 
  /* check for trailing $  */
  if RIGHT(ptrn, 1) = '$' then do      /* must match end of line */
    call debugMsg "found trailing $"
    ptrnLen = ptrnLen - 1              /* discount '$' */
    if RIGHT(line, ptrnLen) = LEFT(ptrn, ptrnLen) then
      return 1                         /* match */
    else
      return 0                         /* no match */
  end
 
  /* all other search cases */
  i = 1                                /* Pattern pointer */
  j = 1                                /* String pointer */
  do while i <= ptrnLen & j <= lineLen
    ptrnCh = SUBSTR(ptrn, i, 1)        /* next char in pattern */
    lineCh = SUBSTR(line, j, 1)        /* next char in line */
    call debugMsg "i:" i "j:" j "ptrnCh:" ptrnCh "lineCh:" lineCh
    if ptrnCh = "." then do           /* '.' matches any character */
      if SUBSTR(ptrn, i + 1, 1) <> "*" then do /* no '.*' */
        i = i + 1
        j = j + 1
        iterate                        /* always matches */
      end
      else do                          /* found '.*' */
        i = i + 2                      /* skip over '.' and '*' */
        if i > ptrnLen then            /* nothing after '.*' */
          return 1
        nextPtrnCh = SUBSTR(ptrn, i, 1)
        do while j <= lineLen
          lineCh = SUBSTR(line, j, 1)
          if lineCh = nextPtrnCh then do
            saveI = i
            saveJ = j
            match = 1
            k = i
            l = j
            do while k <= ptrnLen & l <= lineLen
              if SUBSTR(ptrn, k, 1) <> SUBSTR(line, l, 1) then do
                match = 0
                leave
              end
              k = k + 1
              l = l + 1
            end
            if match = 1 then
              return 1
          end
          j = j + 1
        end
      end
    end
    if ptrnCh = lineCh then do         /* literal character match */
      i = i + 1                        /* check next pattern char */
      j = j + 1
    end
    else do
      i = 1                            /* back to start of pattern */
      j = j + 1                        /* check next line char */
    end
  end
  call debugMsg "Bottom of loop - i:" i "ptrnLen:" ptrnLen
  if i <= ptrnLen then
    return 0                           /* not full pattern match */
  else                                 /* match */
    return 1                           /* regex() */
 
/*--------------------------------------------------------------------*/
help:
/* Give help then exit                                                */
/*--------------------------------------------------------------------*/
say "Name:  GREP EXEC - search files for text patterns"
say "Usage: GREP [lnx-flags] 'pattern' FN FT [FM] [(flags)]"
say "Where: pattern is a single quote delimited search string"
say "       FN FT is the file name and type to search"
say "       FM is the file mode (default A)"
say "Where: zvm '(FLAGS' or Linux '-flags' can be one or more of:"
say "         d: show debug messages"
say "         i: ignore case"
say "         n: show line numbers"
say "         t: turn trace on"
say "         v: inverse - show non-matches"
say "Note : Each lnx-flag must be preceded with '-'"
say ""
say "Special characters:"
say "   .  - Matches one character"
say "   .* - Matches one or more characters"
say "   µ  - Matches start of line"
say "   $  - Matches end of line"
exit 2
 
